@page "/list"

<PageTitle>Receiver List</PageTitle>

@using S5CommunicationLibrary.Web.Data

@inject TrantecReceiverService ReceiverService



<table class="table">
<thead>
    <tr>
        <th class="sorter" @onclick="() => {CurrentSortBy = SortBy.Name; SortByDescending = !SortByDescending;}">Name</th>
        <th class="sorter" @onclick="() => {CurrentSortBy = SortBy.Frequency; SortByDescending = !SortByDescending;}">Frequency</th>
        <th>RF</th>

        <th>Audio Level</th>
        <th>Battery Level</th>
        <th>Muted</th>

        <th>Actions</th>
    </tr>
</thead>
<tbody>
        @if (Receivers != null)
        {
            @foreach (var rx in GetSortedReceiverList())
            {
                
                <tr class="@((rx.CurrentStatus == S5.Receiver.Status.Connected)? "rx-connected" : "rx-disconnected")">
                    <td style="vertical-align: middle">
                        @if(rx.CurrentStatus == S5.Receiver.Status.Connected)
                        {
                            @rx.Name
                        }else{
                            <span>-</span>
                        }
                    </td>
                    <td style="vertical-align: middle">
                        @if(rx.CurrentStatus == S5.Receiver.Status.Connected)
                        {
                            @rx.Frequency.ToString("000.000MHz")
                        }else{
                            <span>-</span>
                        }
                    </td>
                    <td style="width: 30%">
                        @if(rx.CurrentStatus == S5.Receiver.Status.Connected)
                        {
                        <!-- RF -->
                        <div class="progress 
                            @((rx.CurrentAntenna == S5.Receiver.Antenna.A)? "active-antenna" : "inactive-antenna")                       
                            ">
                            <div class="progress-bar 
                                @((rx.CurrentAntenna == S5.Receiver.Antenna.A)? "progress-bar-striped" : "")
                                @((rx.RFA < 0.4f)? "bg-danger" : "")
                                @((rx.RFA >= 0.4f && rx.RFA < 0.7f)? "bg-warning" : "")
                                @((rx.RFA >= 0.7f)? "bg-success" : "")
                            " role="progressbar" style="width: @(ToPercent(rx.RFA))" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100">A</div>
                        </div>

                        <div style="margin-top: 5px;" class="progress 
                            @((rx.CurrentAntenna == S5.Receiver.Antenna.B)? "active-antenna" : "inactive-antenna")
                        ">
                            <div class="progress-bar 
                                @((rx.CurrentAntenna == S5.Receiver.Antenna.B)? "progress-bar-striped" : "")
                                @((rx.RFB < 0.4f)? "bg-danger" : "")
                                @((rx.RFB >= 0.4f && rx.RFB < 0.7f)? "bg-warning" : "")
                                @((rx.RFB >= 0.7f)? "bg-success" : "")
                            " role="progressbar" style="width: @(ToPercent(rx.RFB))" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100">B</div>
                        </div>
                        }else{
                            <div class="rx-connect-button">
                                Disconnected: @rx.PortName <button class="btn btn-primary" @onclick="(e) => {rx.Start();}">Connect</button>
                            </div>
                        }
                    </td>

                    <td style="vertical-align: middle">
                        @if(rx.CurrentStatus == S5.Receiver.Status.Connected)
                        {
                        <!-- Audio Level -->
                        <div style="border: 1px solid black; height:32px" class="progress">
                            <div class="progress-bar
                                @((rx.AudioLevel > 0.8f)? "bg-danger" : "")
                                @((rx.AudioLevel > 0.6f && rx.AudioLevel <= 0.8f)? "bg-warning" : "")
                                @((rx.AudioLevel <= 0.6f)? "bg-success" : "")
                            " role="progressbar" style="width: @(ToPercent(rx.AudioLevel))" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100">
                            </div>
                        </div>
                        }
                    </td>
                    <td style="vertical-align: middle; width: 15%;">
                        @if (!rx.IsMuted)
                        {
                            <div style="border: 1px solid black; height:32px" class="progress">
                                <div class="progress-bar
                                @((rx.BatteryLevel < 0.4f)? "bg-danger" : "")
                                @((rx.BatteryLevel >= 0.4f && rx.BatteryLevel < 0.6f)? "bg-warning" : "")
                                @((rx.BatteryLevel >= 0.6f)? "bg-success" : "")
                            " role="progressbar" style="width: @(ToPercent(rx.BatteryLevel))" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100">
                                    @(ToPercent(rx.BatteryLevel))
                                </div>
                            </div>
                        }
                    </td>
                    <td style="vertical-align: middle; width: 10%; text-align:center">
                        @if(rx.IsMuted && rx.CurrentStatus == S5.Receiver.Status.Connected)
                        {
                            <span class="badge bg-danger">MUTED</span>
                        }
                        @if(rx.IsPcMuted && rx.CurrentStatus == S5.Receiver.Status.Connected)
                        {
                            <span class="badge bg-warning">PC MUTED</span>
                        }
                        
                    </td>
                    <td>
                        @if(rx.CurrentStatus == S5.Receiver.Status.Connected)
                        {
                            @if(rx.IsPcMuted)
                            {
                                <button class="btn btn-danger" @onclick="(e) => {rx.SetPcMute(false);}">UnMute</button>
                            }else{
                                <button class="btn btn-danger" @onclick="(e) => {rx.SetPcMute(true);}">Mute</button>
                            }
                        }
                    </td>
                </tr>
            }

        }
    </tbody>
</table>



@code {
    List<S5.Receiver>? Receivers;

    protected enum SortBy{
        Name,
        Frequency
    }
    protected SortBy CurrentSortBy = SortBy.Frequency;
    protected bool SortByDescending = false;

    protected override async Task OnInitializedAsync()
    {
        Receivers = ReceiverService.GetReceivers();

    }

    protected string ToPercent(float input)
    {
        return String.Format("{0:0%}", input);
    }


    protected List<S5.Receiver> GetSortedReceiverList()
    {
        if(Receivers == null)
            return null;
        
        if(SortByDescending)
        {
            switch(CurrentSortBy)
            {
                case SortBy.Name:
                    return Receivers.OrderByDescending(r => r.Name).ToList();
                case SortBy.Frequency:
                    return Receivers.OrderByDescending(r => r.Frequency).ToList();
            }
        }else{
            switch(CurrentSortBy)
            {
                case SortBy.Name:
                    return Receivers.OrderBy(r => r.Name).ToList();
                case SortBy.Frequency:
                    return Receivers.OrderBy(r => r.Frequency).ToList();
            }
        }

        return Receivers;
    }



    // Timer to refresh data on this page every second
    System.Threading.Timer? timer;
    protected override void OnInitialized()
    {
        timer = new System.Threading.Timer(async _ =>  // async void
        {

            InvokeAsync(() => StateHasChanged());

        }, null, 0, 250);
    }



}
